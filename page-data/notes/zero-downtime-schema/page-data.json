{"componentChunkName":"component---src-templates-blog-post-js","path":"/notes/zero-downtime-schema","result":{"data":{"markdownRemark":{"html":"<p>When running multiple Server nodes, sharing the same Database, it becomes more and more important to handle backwards compatibility on the database especially during Deployments.</p>\n<p>When we start da Deployment, a new Server node is being deployed to a cluster. This node will then migrate the Database to it's designated schema version. If this new version is not backwards compatible, the currently running Server instances will run into several problems, reading or writing to the database.</p>\n<p>There is no \"easy\" solution for this problem. I'd love to share a solution we came up with to you</p>\n<p><strong>Requirement</strong>:\nA join table (from a 1:n relation) should be removed. For a Simple Example let's say, we have the following Schema:</p>\n<ul>\n<li><code class=\"language-text\">voucher(id)</code></li>\n<li><code class=\"language-text\">used_voucher(user_id, voucher_id)</code></li>\n<li><code class=\"language-text\">user(id)</code></li>\n</ul>\n<p>Where as a voucher can only be redeemed by a single user.</p>\n<p><strong>Problem</strong>:\nIf we would just remove the join table <code class=\"language-text\">used_voucher</code> all currently running nodes would fail to read voucher usages and write newly redeemed vouchers</p>\n<p><strong>Solution</strong>:\nSplit up the Deployment / Schema migration into 2 seperat steps:</p>\n<p>Migration 1:</p>\n<ul>\n<li>Introduce a new column: <code class=\"language-text\">voucher(user_id)</code></li>\n<li>Update <code class=\"language-text\">voucher.user_id</code> with the current values from <code class=\"language-text\">used_voucher</code></li>\n<li>Introduce a Trigger which writes the <code class=\"language-text\">voucher(user_id)</code> when writing <code class=\"language-text\">used_voucher(user_id, voucher_id)</code></li>\n<li>Introduce a Trigger which writes the <code class=\"language-text\">used_voucher(user_id, voucher_id)</code> when writing <code class=\"language-text\">voucher(user_id)</code></li>\n</ul>\n<p>Migration 2:</p>\n<ul>\n<li>Remove both Triggers</li>\n<li>Drop <code class=\"language-text\">used_voucher(user_id, voucher_id)</code></li>\n</ul>\n<p><strong>Examples</strong>:</p>\n<p>Migration 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Update voucher set user_id on insert used_voucher</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">FUNCTION</span> add_user_id_to_voucher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token keyword\">AS</span>\n$func$\n<span class=\"token keyword\">BEGIN</span>\n  <span class=\"token keyword\">UPDATE</span> voucher v <span class=\"token keyword\">SET</span> user_id <span class=\"token operator\">=</span> NEW<span class=\"token punctuation\">.</span>user_id <span class=\"token keyword\">WHERE</span> v<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> NEW<span class=\"token punctuation\">.</span>voucher_id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">RETURN</span> NEW<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n$func$ <span class=\"token keyword\">LANGUAGE</span> plpgsql<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> tg_add_user_id_to_voucher\n  <span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">ON</span> used_voucher <span class=\"token keyword\">FOR EACH ROW</span>\n<span class=\"token keyword\">EXECUTE</span> <span class=\"token keyword\">PROCEDURE</span> add_voucher_id<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">-- Insert used_voucher on Insert / Update of voucher</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">FUNCTION</span> insert_used_voucher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token keyword\">AS</span>\n$func$\n<span class=\"token keyword\">BEGIN</span>\n  <span class=\"token keyword\">IF</span> NEW<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">THEN</span>\n    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> used_voucher<span class=\"token punctuation\">(</span>voucher_id<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>NEW<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> NEW<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ON</span> CONFLICT <span class=\"token keyword\">DO</span> NOTHING<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">RETURN</span> NEW<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n$func$ <span class=\"token keyword\">LANGUAGE</span> plpgsql<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> tg_insert_used_voucher\n  <span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">INSERT</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">ON</span> voucher <span class=\"token keyword\">FOR EACH ROW</span>\n<span class=\"token keyword\">EXECUTE</span> <span class=\"token keyword\">PROCEDURE</span> insert_used_voucher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Migration 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> tg_add_user_id_to_voucher<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> add_user_id_to_voucher<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> tg_insert_used_voucher<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">FUNCTION</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> insert_used_voucher<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> used_voucher<span class=\"token punctuation\">;</span></code></pre></div>","excerpt":"When running multiple Server nodes, sharing the same Database, it becomes more and more important to handle backwards compatibility on the database especiallyâ€¦","frontmatter":{"date":"12 January, 2023","path":"/notes/zero-downtime-schema","title":"Zero downtime deployment with breaking DB-Schema change - by example"},"timeToRead":2}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}