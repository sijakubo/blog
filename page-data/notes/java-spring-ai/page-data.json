{"componentChunkName":"component---src-templates-blog-post-js","path":"/notes/java-spring-ai","result":{"data":{"markdownRemark":{"html":"<p>I came across the release notes for <a href=\"https://spring.io/blog/2024/02/23/spring-ai-0-8-0-released\">Spring AI 0.8.0</a> and i thought i might give it a try and it's frighteningly simple to do so. Here is a short sample Project: <a href=\"https://github.com/sijakubo/spring-ai-test\">https://github.com/sijakubo/spring-ai-test</a></p>\n<p>You just have to:</p>\n<ul>\n<li>include the Spring AI dependencies</li>\n<li>provide an AI token</li>\n<li>call the Spring AI proxy (e.g. ChatClient, ImageClient)</li>\n</ul>\n<p>Supported models are:</p>\n<blockquote>\n<p><strong>Chat Models</strong></p>\n<ul>\n<li>OpenAI</li>\n<li>Azure Open AI</li>\n<li>Amazon Bedrock</li>\n<li>Anthropic's Claude</li>\n<li>Cohere's Command</li>\n<li>AI21 Labs' Jurassic-2</li>\n<li>Meta's LLama 2</li>\n<li>Amazon's Titan</li>\n<li>Google Vertex AI Palm - Gemini support coming soon (follow the WIP branch)</li>\n<li>HuggingFace - access thousands of models, including those from Meta such as Llama2</li>\n<li>Ollama - run AI models on your local machine</li>\n</ul>\n<p><strong>Text-to-image Models</strong></p>\n<ul>\n<li>OpenAI with DALL-E</li>\n<li>StabilityAI</li>\n</ul>\n<p><strong>Embedding Models</strong></p>\n<ul>\n<li>OpenAI</li>\n<li>Azure OpenAI</li>\n<li>Ollama</li>\n<li>ONNX</li>\n<li>PostgresML</li>\n<li>Bedrock Cohere</li>\n<li>Bedrock Titan</li>\n<li>Google VertexAI</li>\n</ul>\n</blockquote>\n<h3>Include Spring AI Dependencies:</h3>\n<p>just add the Maven BOM for the Spring AI to your gradle dependency management and include the actual Spring AI spring boot Starter dependency</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">build<span class=\"token punctuation\">.</span>gradle<span class=\"token punctuation\">.</span>kts\n\ndependencyManagement <span class=\"token punctuation\">{</span>\n    imports <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">mavenBom</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.springframework.ai:spring-ai-bom:0.8.0\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">...</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"org.springframework.ai:spring-ai-openai-spring-boot-starter\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>provide an AI token</h3>\n<p>In order to use an AI Service, you'll have to provide an actual token. You can do so within the <code class=\"language-text\">application.properties</code>. You need to provide the token for the AI Service to use within your Application. E.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.ai.openai.api-key=&lt;OPEN_AI_API_KEY>\nspring.ai.openai.image.api-key=&lt;OPEN_AI_API_KEY>\n\nspring.ai.azure.openai.api-key=&lt;AZURE_API_KEY></code></pre></div>\n<p>You also have the option to configure the usage of the designated AI Service. E.g. using the OpenAI Service, you can configure e.g. these options:</p>\n<table>\n<thead>\n<tr>\n<th>option</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>model</td>\n<td>This is the OpenAI Chat model to use (e.g. )</td>\n</tr>\n<tr>\n<td>temperature</td>\n<td>The sampling temperature to use that controls the apparent creativity of generated completions</td>\n</tr>\n<tr>\n<td>maxTokens</td>\n<td>The maximum number of tokens to generate in the chat completion</td>\n</tr>\n</tbody>\n</table>\n<h3>Call the Spring AI proxy</h3>\n<p>In order to actually use the AI Service, you can call the designated Proxy Client.</p>\n<p>When just using the <code class=\"language-text\">ChatClient</code> you can prompt the AI questions, just as if you would chat with the AI. E.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> quote <span class=\"token operator\">=</span> chatClient<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tell a random funny 'The Office' quote\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> translatedText <span class=\"token operator\">=</span> chatClient<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Translate the following text from langauge: %s to language: %s. The text is: %s\"</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">formatted</span><span class=\"token punctuation\">(</span>\n        translationResource<span class=\"token punctuation\">.</span><span class=\"token function\">sourceLanguage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        translationResource<span class=\"token punctuation\">.</span><span class=\"token function\">targetLanguage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        translationResource<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Conclusion</h3>\n<p>It's utterly simple to integrate an AI Service into your application. As often, the only limit is your ability to identify useful UseCases for this. Spring provides easy methods to integrate several AI Services by abstracting beyond the actual service APIs which makes it easy to exchange between multiple Services and evaluate their results to your personal needs.</p>","excerpt":"I came across the release notes for Spring AI 0.8.0 and i thought i might give it a try and it's frighteningly simple to do so. Here is a short sample Projectâ€¦","frontmatter":{"date":"08 March, 2024","path":"/notes/java-spring-ai","title":"Enhance your Java Spring Applications with AI"},"timeToRead":2}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}