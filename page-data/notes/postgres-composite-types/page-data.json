{"componentChunkName":"component---src-templates-blog-post-js","path":"/notes/postgres-composite-types","result":{"data":{"markdownRemark":{"html":"<p>PostgreSQL is a powerful and flexible open-source relational database management system. One of its most useful features is the ability to define <a href=\"https://www.postgresql.org/docs/current/rowtypes.html\">custom composite types</a> (Since Postgres 11), which are user-defined data types that combine multiple fields of different types into a single logical entity. In this article, we'll explore the benefits of using composite types in PostgreSQL and how to use them in your database schema.</p>\n<h3>Create Composite Type</h3>\n<p>To define a composite type in PostgreSQL, you use the CREATE TYPE statement, followed by the name of the type and a list of its component fields and types. For example, here's how you might define a audit type:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TYPE</span> AUDIT <span class=\"token keyword\">AS</span> <span class=\"token punctuation\">(</span>\n    created_at TIMESTAMPTZ<span class=\"token punctuation\">,</span>\n    created_by UUID<span class=\"token punctuation\">,</span>\n    updated_at TIMESTAMPTZ<span class=\"token punctuation\">,</span>\n    updated_by UUID\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Create Table using Composite Type</h3>\n<p>Once you've defined a composite type, you can use it in your database schema just like any other data type. For example, you could create a table that includes a column of type customer_info:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> customer <span class=\"token punctuation\">(</span>\n    id UUID <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n    audit AUDIT\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Insert data</h3>\n<p>To insert data into a table that includes a composite type, you can use the ROW constructor syntax, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> customer<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> audit<span class=\"token punctuation\">.</span>created_at<span class=\"token punctuation\">,</span> audit<span class=\"token punctuation\">.</span>created_by<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>gen_random_uuid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'36765812-fa07-4227-bb90-e2b6ff00da89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Query data</h3>\n<p>To query data from a table that includes a composite type, you can use the dot notation to access individual fields of the composite type, like\nthis:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">(</span>audit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>created_at<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>audit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>created_by <span class=\"token keyword\">FROM</span> customer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note: You have to use the Parenthesis around the composite property, otherwise PostgreSQL tries to interpret it as a own table.</p>\n<h3>Define constraints on composite types using DOMAIN - Types</h3>\n<p>Composite Types do not support constraints. However, you can create a <a href=\"https://www.postgresql.org/docs/current/sql-createdomain.html\"><code class=\"language-text\">DOMAIN</code></a> Type including constraints like:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> DOMAIN AUDIT_DOMAIN <span class=\"token keyword\">AS</span> AUDIT\n<span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>created_at <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token operator\">AND</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>created_by <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you have to use the <code class=\"language-text\">DOMAIN</code> Type instead of the composite type</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> customer <span class=\"token punctuation\">(</span>\n    id UUID <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n    audit AUDIT_DOMAIN\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Inserts or updates violating this constraint will fail:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> customer<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> audit<span class=\"token punctuation\">.</span>created_at<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>gen_random_uuid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--- [23514] ERROR: value for domain audit_domain violates check constraint \"audit_domain_check\"</span></code></pre></div>\n<h3>Use Composite Types in Hibernate</h3>\n<p>New Annotation <code class=\"language-text\">@Struct</code> will be introduced in <a href=\"https://hibernate.org/orm/releases/6.2/\">Hibernate 6.2</a> (currently development phase).</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Embeddable</span>\n<span class=\"token annotation punctuation\">@Struct</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"AUDIT_DOMAIN\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Audit</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@NotNull</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ZonedDateTime</span> createdAt<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@NotNull</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UUID</span> createdBy<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ZonedDateTime</span> updatedAt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UUID</span> updatedBy<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>See also <a href=\"https://thorben-janssen.com/composite-type-with-hibernate/\">https://thorben-janssen.com/composite-type-with-hibernate/</a> for more information on how to use composite Types with Hibernate</p>","excerpt":"PostgreSQL is a powerful and flexible open-source relational database management system. One of its most useful features is the ability to define customâ€¦","frontmatter":{"date":"30 March, 2023","path":"/notes/postgres-composite-types","title":"PostgreSQL Composite Types to reduce boilerplate code from you database schema"},"timeToRead":2}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}